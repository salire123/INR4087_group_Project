# docker-compose.yml
# version: "3.8"
services:
  mysql:
    image: mysql:latest
    restart: unless-stopped
    volumes:
      - mysql-data:/var/lib/mysql
      - ../db/mysql/db-init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_HOST: "%"
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"  
    networks:
        - project-network

  mongodb:
    image: mongo:latest
    restart: unless-stopped
    volumes:
      - mongodb-data:/data/db
      - ../db/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "${MONGO_PORT}:27017"
    networks:
        - project-network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-password}
      - SERVICE_ACCESS_KEY=appuser
      - SERVICE_SECRET_KEY=apppassword
    entrypoint: /bin/sh
    command: -c "/usr/bin/minio server /data --console-address :9001 & sleep 5 && mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc mb myminio/my-bucket --ignore-existing && mc anonymous set download myminio/my-bucket && mc policy set public myminio/my-bucket && mc admin user add myminio appuser apppassword && mc admin policy attach myminio readwrite --user=appuser && echo '=====================================================' && echo 'MinIO Configuration (For Backend Environment):' && echo '=====================================================' && echo 'MINIO_ENDPOINT=http://minio:9000' && echo 'MINIO_BUCKET=my-bucket' && echo 'MINIO_ACCESS_KEY=appuser' && echo 'MINIO_SECRET_KEY=apppassword' && echo 'MINIO_PUBLIC_ENDPOINT=http://localhost:9000' && echo '=====================================================' && tail -f /dev/null"
    volumes:
      - minio-data:/data
    networks:
      - project-network

  backend:
    build:
        context: ../backend
        dockerfile: ../backend/Dockerfile
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      # Flask
      SECRET_KEY: "my_secret_key"
      FLASK_APP: "app.py"
      APP_PORT: "${BACKEND_PORT}"
      # MySQL
      MYSQL_HOST: "mysql"
      MYSQL_PORT: "${MYSQL_PORT}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_ROOT_HOST: "%"
      # MongoDB
      MONGO_URL: "mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017"
      MONGO_DATABASE: "${MONGO_DATABASE}"
      # MinIO
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_BUCKET: "my-bucket"
      MINIO_ACCESS_KEY: "appuser"
      MINIO_SECRET_KEY: "apppassword"
    networks:
        - project-network
    depends_on:
      - mysql
      - mongodb
      - minio
      
networks:
  project-network:
    driver: bridge

volumes:
  mysql-data:
  mongodb-data:
  minio-data: